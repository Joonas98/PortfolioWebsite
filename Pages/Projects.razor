@inject PortfolioWebsite.Services.ProjectService ProjectService
@using PortfolioWebsite.Models
@using Components

@if (projects == null)
{
    <p>Loading projects...</p>
}
else if (!projects.Any())
{
    <p>No projects found.</p>
}
else
{
    <div class="projects-container">
        @foreach (var project in projects)
        {
            <div class="project-card">

                <div class="project-details">
                    <h3>@project.Name</h3>
                    <p>@project.Description</p>
                    <p><strong>Technologies:</strong> @string.Join(", ", project.Technologies)</p>
                    <p><strong>Year:</strong> @project.YearRange</p>

                    @if (project.Links?.Any() == true)
                    {
                        <p>
                            @foreach (var link in project.Links)
                            {
                                <a href="@link.Url" target="_blank">@link.Text</a>
                                @if (link != project.Links.Last())
                                {
                                    <span> | </span>
                                }
                            }
                        </p>
                    }
                </div>

                @if (project.Images?.Any() == true)
                {
                    <div class="project-image">
                        <ImageDisplay Images="project.Images"
                                      SlideInterval="5000"
                                      CssClass="project-images" />
                    </div>
                }

            </div>
        }
    </div>
}

@code {
    private List<Project>? projects;

    protected override async Task OnInitializedAsync()
    {
        projects = await ProjectService.GetProjectsAsync();
    }
}
