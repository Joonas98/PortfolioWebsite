@using System.Timers
@using Microsoft.AspNetCore.Components
@implements IDisposable
@namespace Components

<div class="image-display @CssClass">
    @if (ImageUrls != null && ImageUrls.Any())
    {
        <img src="@ImageUrls[currentIndex]" alt="Image @(currentIndex + 1)" class="@fadeClass" />
        <div class="image-controls">
            <button class="control-btn" @onclick="ShowPrevious">Previous</button>
            <span class="indicator">@((currentIndex + 1)) / @ImageUrls.Count</span>
            <button class="control-btn" @onclick="ShowNext">Next</button>
        </div>
    }
</div>

@code {
    [Parameter] public List<string> ImageUrls { get; set; } = new List<string>();
    [Parameter] public int SlideInterval { get; set; } = 3000;
    [Parameter] public bool AutoSlide { get; set; } = true;
    [Parameter] public string CssClass { get; set; } = "";

    private int currentIndex = 0;
    private Timer? slideTimer;

    protected override void OnInitialized()
    {
        // Start auto slide timer if enabled and there is more than one image.
        if (AutoSlide && ImageUrls.Count > 1)
        {
            slideTimer = new Timer(SlideInterval);
            slideTimer.Elapsed += (s, e) =>
            {
                InvokeAsync(() =>
                {
                    ShowNext();
                    StateHasChanged();
                });
            };
            slideTimer.Start();
        }
    }

    private string fadeClass = "fade-in";

    private async Task ShowNext()
    {
        fadeClass = "fade-out";
        StateHasChanged();
        await Task.Delay(300);
        currentIndex = (currentIndex + 1) % ImageUrls.Count;
        fadeClass = "fade-in";
    }

    private async Task ShowPrevious()
    {
        fadeClass = "fade-out";
        StateHasChanged();
        await Task.Delay(300);
        currentIndex = (currentIndex - 1 + ImageUrls.Count) % ImageUrls.Count;
        fadeClass = "fade-in";
    }

    public void Dispose()
    {
        slideTimer?.Dispose();
    }
}
