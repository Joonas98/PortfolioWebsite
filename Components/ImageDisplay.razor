@namespace Components
@using PortfolioWebsite.Models
@implements IDisposable
@inject NavigationManager Nav

<div class="image-display @CssClass">
    @if (Images?.Any() == true)
    {
        @for (int i = 0; i < Images.Count; i++)
        {
            var item = Images[i];
            <div class="slide @(i == currentIndex ? "active" : string.Empty)">
                <img src="@(Nav.BaseUri + item.Url)" alt="@item.Alt" />

                @if (Images.Count > 1)
                {
                    <div class="slide-footer">
                        <button class="btn-prev" @onclick="ShowPrevious" aria-label="Previous slide">‹</button>
                        <span class="slide-index">@($"{i + 1} / {Images.Count}")</span>
                        <button class="btn-next" @onclick="ShowNext" aria-label="Next slide">›</button>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(item.Description))
                {
                    <div class="slide-caption">@item.Description</div>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter] public List<Project.ImageInfo> Images { get; set; } = new();
    [Parameter] public int SlideInterval { get; set; } = 4000;
    [Parameter] public string CssClass { get; set; } = string.Empty;

    private bool _autoSlideEnabled;
    [CascadingParameter]
    public bool AutoSlideEnabled
    {
        get => _autoSlideEnabled;
        set
        {
            if (_autoSlideEnabled == value) return;
            _autoSlideEnabled = value;
            if (!_autoSlideEnabled)
            {
                _cts?.Cancel();
                _cts?.Dispose();
                _cts = null;
            }
            else if (Images.Count > 1)
            {
                StartAutoSlide();
            }
        }
    }

    private int currentIndex;
    private CancellationTokenSource? _cts;

    protected override void OnInitialized()
    {
        if (AutoSlideEnabled && Images.Count > 1)
        {
            StartAutoSlide();
        }
    }

    private void StartAutoSlide()
    {
        _cts?.Cancel();
        _cts?.Dispose();
        _cts = new CancellationTokenSource();
        _ = AutoLoop(_cts.Token);
    }

    private async Task AutoLoop(CancellationToken token)
    {
        try
        {
            while (!token.IsCancellationRequested)
            {
                await Task.Delay(SlideInterval, token);
                ShowNext();
                StateHasChanged();
            }
        }
        catch (TaskCanceledException) { }
    }

    private void ShowNext()
    {
        if (Images.Count <= 1) return;
        currentIndex = (currentIndex + 1) % Images.Count;
        if (AutoSlideEnabled)
            StartAutoSlide();
    }

    private void ShowPrevious()
    {
        if (Images.Count <= 1) return;
        currentIndex = (currentIndex - 1 + Images.Count) % Images.Count;
        if (AutoSlideEnabled)
            StartAutoSlide();
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }
}
